@page "/calendar"

<div class="d-flex flex-row mb-2">
	<button type="button" @onclick="GoToday" class="btn">📅 Go Today</button>
	<button type="button" @onclick="@(m => ClicMonthNavigate(-1))" class="btn">🔼</button>
	<button type="button" @onclick="@(m => ClicMonthNavigate(1))" class="btn me-2">🔽</button>
	<input type="date" class="me-2" value="@(today.ToString("yyyy-MM-dd"))" @onchange="@(e => ChangeFirstDate(e.Value.ToString()))" />
	<select @bind="@PriorityDisplay" class="me-2">
		<option value="@PriorityLabel.Code" selected>priority Code</option>
		<option value="@PriorityLabel.Caption">priority Caption</option>
	</select>
	<div>
		<input type="checkbox" @bind="draggable" id="is-draggable" />
		<label for="is-draggable">Draggable</label>
	</div>
</div>


@if (TasksList != null)
{
	<CalendarContainer FirstDate="today"
					   TasksList="TasksList.ToArray()"
					   DisplayedView="DisplayedView.Monthly">
		<Calendar PriorityDisplay="@PriorityDisplay"
				  OutsideCurrentMonthClick="OutsideCurrentMonthClick"
				  TaskClick="TaskClick"
				  DayClick="DayClick"
				  Draggable="@draggable"
				  DragStart="DragStart"
				  DropTask="DropTask"
				  HighlightToday="true" />
	</CalendarContainer>
}

<div class="console">@fakeConsole</div>


@code {
	[Inject] HttpClient Http { get; set; } = null!;

	private List<DTOCalendarEntry> TasksList = null!;
	private DateTime today = DateTime.Today;
	private int months = 12;
	private string fakeConsole = "";
	private PriorityLabel PriorityDisplay = PriorityLabel.Code;
	private bool draggable = true;


	protected override async Task OnInitializedAsync()
	{
		if (TasksList == null)
		{
			var result = await Http.GetAsync("CalendarEntry");
			var tmpList = (await result.Content.ReadFromJsonAsync<IEnumerable<DTOCalendarEntry>>(Program.defaultJsonSerializerOptions))?.ToList();
			Console.WriteLine(string.Join(Environment.NewLine, tmpList!));
			TasksList = tmpList!;
		}
		await base.OnInitializedAsync();
	}

	private void ChangeFirstDate(string value)
	{
		if (string.IsNullOrEmpty(value)) return;
		today = DateTime.Parse(value.ToString());
	}

	private void GoToday()
	{
		today = DateTime.Today;
	}

	private void ClicMonthNavigate(int monthToAdd)
	{
		today = today.AddMonths(monthToAdd);
	}

	private void OutsideCurrentMonthClick(int MonthAdded)
	{
		today = today.AddMonths(MonthAdded);
	}

	private void TaskClick(ClickTaskParameter clickTaskParameter)
	{
		fakeConsole = "ID task(s) :" + string.Join(", ", clickTaskParameter.IDList);
	}

	private void DayClick(ClickEmptyDayParameter clickEmptyDayParameter)
	{
		fakeConsole = "Empty day :" + clickEmptyDayParameter.Day.ToShortDateString();
	}

	private void DragStart(DragDropParameter dragDropParameter)
	{
		fakeConsole = $"DragStart event : {dragDropParameter.taskID}";
	}

	private void DropTask(DragDropParameter dragDropParameter)
	{
		fakeConsole = $"DropTask event :{dragDropParameter.Day.ToShortDateString()} {dragDropParameter.taskID}";

		DTOCalendarEntry? taskDropped = TasksList.FirstOrDefault(t => t.Id.HasValue && t.Id.Value == dragDropParameter.taskID);
		if(taskDropped != null)
		{
			var TotalDay = (taskDropped.DateEnd - taskDropped.DateStart).TotalDays;
			taskDropped.DateEnd = dragDropParameter.Day.AddDays(TotalDay);
			taskDropped.DateStart = dragDropParameter.Day;
		}

	}
}
