@page "/login"
<PageTitle >Login</PageTitle>

<div class="d-flex justify-center">
    <h1>Login</h1>
</div>
<div class="d-flex justify-center">
    @*Validation=@this.Validator.ValidateValue @bind-Errors=@errors IsValid=@success*@
    @*Disabled="@(!success)"*@
    <MudForm Model="@user" @ref=form
             >
        <MudGrid>
            <MudItem xs="12">
                <MudCard>
                    <MudCardContent>

                        <MudTextField Label="Email" Class="mt-3"
                        @bind-Value="user.Email" For="@(() => user.Email)" />
                        <MudTextField Label="Password" HelperText="Choose a strong password - Min. 8 characters" Class="mt-3"
                        @bind-Value="user.Password" For="@(() => user.Password)" InputType="InputType.Password" />
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled"
                                   Color="Color.Primary" Class="ml-auto" OnClick="HandleLogin">Login</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
            @*
            <MudItem xs="12" sm="5">
                <MudPaper Class="pa-4 mud-height-full">
                    <MudText Typo="Typo.subtitle2">Validation Summary</MudText>
                    @if (!success)
                    {
                        @success
                        <MudText Color="@Color.Error">
                            @foreach (var error in errors)
                            {
                                <MudText Color="@Color.Error">@error</MudText>
                            }
                        </MudText>

                        @if (errors.Length <= 0)
                        {
                            success = true;
                        }
                    }
                </MudPaper>
            </MudItem>
            *@
            
            <MudItem xs="12">
                <MudText Typo="Typo.body2" Align="Align.Center">
                    <MudLink Href="/registration">Click here if you want to register!</MudLink>
                </MudText>
            </MudItem>
            
        </MudGrid>
    </MudForm>
</div>

<ClockSpinner IsLoading=@IsLoading SpinnerText="We are logging you in mate!" LoaderType="ClockSpinner.LoaderTypes.TwoBubbles"></ClockSpinner>

@code {
    [Inject] protected HttpClient Http { get; set; } = null!;
    [Inject] protected AuthenticationStateProvider authStateProvider { get; set; } = null!;
    [Inject] protected ILocalStorageService localStorageService { get; set; } = null!;
    [Inject] protected NavigationManager navigationmanager { get; set; } = null!;

    DTOUserLoginForm user = new DTOUserLoginForm();
    MudForm form = new MudForm();
    bool IsLoading { get; set; }

    async Task HandleLogin()
    {
        try
        {
            IsLoading = true;
            await Task.Yield();
            var result = await Http.PostAsJsonAsync("Auth/login", user);

            if (!result.IsSuccessStatusCode)
                throw new ArgumentException("Login Unsuccessful!");

            var token = await result.Content.ReadAsStringAsync();
            Console.WriteLine(token);
            await localStorageService.SetItemAsync("token", token);
            Console.WriteLine(await authStateProvider.GetAuthenticationStateAsync());
            navigationmanager.NavigateTo("/");
        }
        catch(Exception e)
        {
            Console.WriteLine(e);
        }
        finally
        {
            IsLoading = false;
        }
    }
}
